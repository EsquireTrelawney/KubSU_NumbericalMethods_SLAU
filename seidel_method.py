import numpy as np


# Метод Зейделя: принимает на вход матрицу коэфф, вектор свободных коэфф и начальную точность
def seidel_solve(matrix, column_vector, epsilon, x):
    # подсчёт кол-ва итераций
    iteration_num = 0
    num_of_rows = len(matrix)  # кол-во уравнений в матрице, да и столбцов тоже. матрица ж квадратная
    # x = np.array([0, 0, 0]) # создаём вектор с начальным приближением решения. Нуль-вектор с таким же кол-вом
    # ... элементов, что и у вектора свободных коэфф. лучше его передавать, чтобы анализировать
    # работу в третьем задании
    is_converge = False
    # цикл будет выполняться до тех пор, пока задаваемая точность epsilon не станет меньше 1е-6(1*10-6 ->
    while not is_converge:
        x_new = np.copy(x)  # запоминаем вектор x
        # для каждого уравнения в матрице выполянем расчёт новых знчений неизвестных
        # делаем это по формуле итерационного процесса Зейделя, где s1 и s2 - переменные для хранения суммы произведений
        # элементов строки матрицы и уже найденных значений незивестных(предполагаемых решений)
        for i in range(num_of_rows):
            s1 = sum(matrix[i][j] * x_new[j] for j in range(i))
            s2 = sum(matrix[i][j] * x[j] for j in range(i + 1, num_of_rows))
            # записываем новое значение i-го неизвестного
            x_new[i] = (column_vector[i] - s1 - s2) / matrix[i][i]
        # погрешность обновляем как норму разности нового и старого приближений, т.е. рассчитываем сумму модулей разности
        # текущего и предыдущего значений x_new и x соответственно
        is_converge = np.allclose(x, x_new, atol=epsilon, rtol=0)
        # epsilon = sum(abs(x_new[i] - x[i]) for i in range(num_of_rows))
        iteration_num += 1
        # обновляем вектор х новыми значениями их x_new
        x = x_new

    return x, epsilon, iteration_num  # возвращаем тройку - столбец-решений, достигнутую погрешность, кол-во итераций
